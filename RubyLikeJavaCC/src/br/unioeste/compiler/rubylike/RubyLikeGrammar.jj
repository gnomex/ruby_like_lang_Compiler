/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;
  LOOKAHEAD = 2;
  DEBUG_PARSER = false;}PARSER_BEGIN(RubyLikeGrammar)package br.unioeste.compiler.rubylike;

import javax.swing.JTextArea;
import java.io.*;
import java.util.*;
import br.unioeste.compiler.recovery.*;

public class RubyLikeGrammar{
    int contParseError; // Contador de erros sintáticos
    boolean debug_recovery; // Controla a verbose de recuperação de erros
	JTextArea erros;
	
    Hashtable tbl = new Hashtable ();

    public void compilar ( boolean debug_as, boolean debug_recovery, JTextArea errorArea)  {
	this.erros = errorArea;
    this.debug_recovery = debug_recovery;    
    if (!debug_as) this.disable_tracing();

    int b=1;
    while (b==1) {
      try {
        b = this.program();
        switch (b) {
          case 0 :  erros.append("Goodbye.\n");
                    break;
          case 1 :  erros.append("OK.\n");
                    break;
          default : break;
        }
      }	        
      catch (Exception e) {
        erros.append("Oops.\n");
        erros.append(e.getMessage()+ "\n");
        break;
      }
    }
  }
    public static void main(String args []) throws ParseException  {
    boolean debug_as = true;
    boolean debug_recovery = true;
    RubyLikeGrammar parser = new RubyLikeGrammar(System.in);

    parser.debug_recovery = debug_recovery;
    
    if (!debug_as) parser.disable_tracing();
        int b=1;
    while (b==1) {
      System.out.println("Lendo da entrada padrão...");
      System.out.print("Expressão \"1+(2+3)*4;\" ou atribuição :");
      try {
        b = parser.program();
        switch (b) {
          case 0 :  System.out.println("Goodbye.");
                    break;
          case 1 :  System.out.println("OK.");
                    break;
          default : break;
        }
      }
      catch (ParseException e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }  }

  void mostrarResult ( double a )
  {
 	//this.erros.append ( Double.toString ( a ) );
  } 

  // Relaciona o indice de um token com seu nome
  static public String im ( int x ) {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf ( "\"");
    try {
      s = s.substring ( 1, k );
    } catch ( StringIndexOutOfBoundsException e ) { }
    return s;
  }

  boolean eof; // Variável que indica se EOF foi alcançado
  // O método abaixo consome os tokens até alcançar um que pertença
  // ao conjunto de resincronização
  void consumeUntil ( RecoverySet g,
                      ParseException e,
                      String met ) throws ParseEOFException, ParseException  {
     Token tok;
     eof=false; // FIXME
     if (debug_recovery) { // Informação sobre a recuperação
       erros.append("");
       erros.append( "*** " + met + " *** " + "\n");
       erros.append( " Syncronizing Set: "+ g + "\n");
     }
     if (g==null) throw e; // se o conjunto de recuperação é null, propaga a exceção

     tok = getToken ( 1 ); // pega o token atual
     while (!eof) {
       if ( g.contains ( tok.kind ) ) {
         if ( debug_recovery )
           erros.append( " Found syncronizing token: " + im (tok.kind) + "\n");
         break;
       }
       if (debug_recovery)
         erros.append( " Ignorando token "+ im ( tok.kind) + "\n");
       getNextToken();
       tok = getToken(1);
       if (tok.kind==EOF && !g.contains(EOF) )
         eof = true;
     }
     System.out.println ( e.getMessage());
     contParseError++;
     if ( eof ) throw new ParseException ( "EOF found prematurely.");
   }
   }PARSER_END(RubyLikeGrammar)SKIP :{  " "| "\r"| "\t"| "\n"
| "\f"
| "#" : singlelinecomment
| "/*" : multilinecomment}
< singlelinecomment > SKIP :
{
  < ["\n","\r"] > : DEFAULT
| < ~[] >}

< multilinecomment > SKIP:
{
  "*/" : DEFAULT
| < ~[] >}

TOKEN : /* palavras reservadas */
{
  < IF : "if" >
| < EACH : "each" >
| < ELSE : "else" >
| < PRINT : "print" >}
TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < MINOR : "<" >
| < MAJOR : ">" >
| < ATTRIB : "=" >
| < MINOR_EQUAL : "<=" >
| < MAJOR_EQUAL : "=>" >
| < EQUALS : "==" >
| < AND : "&&" >
| < OR : "||" >
| < LIST : "~" >
| < SETA : "->" >}
TOKEN : /* simbolos especiais */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
| < END_CMD : "!" > }
TOKEN :{
  < INT_CONSTANT : (
    (["0"-"9"] (["0"-"9"])*) |
    (["0"-"7"] (["0"-"7"])* ["o","O"]) |
    (["0"-"9"] (["0"-"7", "A"-"F", "a"-"f"])* ["h","H"]) |
    (["0"-"1"] (["0"-"1"])* ["b","B"]) ) >
| < STRING : "\""(~["\"", "\n", "\r"])* "\"" >| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["A"-"Z"] | ["a"-"z"] >
| < VAR : < LETTER > ( < DIGIT > | < LETTER > ) * >
| < FLOAT : < DIGIT >(< DOT >< DIGIT >)* >}/**
* da inicio a analise lexica, sintática e semântica do compilador
* invoca calc()
* encontrou <EOF > termina a compilação
*/
int program() throws Exception:{
  	RecoverySet g = new RecoverySet ( EOF );}
{
	try  {
	 	calc(g){return 1;}
   		| < EOF >{return 0;}
  	} catch ( ParseException e ) {
		consumeUntil ( g, e, "calc" );
		getNextToken();
  	}}
/**
* Cria uma lista no formato ~(1,2,"asksakask")!
* terminada com ! (< END_CMD >)
* o problema é que só esta pegando o primeiro e o ultimo valor ...
* retorna uma lista
*/

Object list() throws Exception:
{
  	Token t; List<Object> lista = new ArrayList<Object>();
}
{
  < LIST >
  	< LPAREN >
  		list_vars (lista)  ( "," list_vars(lista) )*  		    		
  	< RPAREN >  	
  	
  {return lista;}
}

void list_vars (List<Object> lista) throws Exception: { Token t; }  
{
  		( t = < INT_CONSTANT > | t = < STRING > | t = < FLOAT > | t = < VAR >)
  		{
   			lista.add(t.image);
  		}
}

/**
* Analisa o if e o else
* verifica a condição logica (ainda não decide o que fazer)
* e entra no bloco do if, e no bloco do else
*/
void IfElse(RecoverySet g,boolean c) throws Exception:{
 	boolean cond = false; Token token;}
{ 
  try  {
    < IF > < LPAREN > cond = expressionLogical(g) < RPAREN >
    < LBRACE >
      block(g, ((c == false) ? c : cond))
    < RBRACE >
    [ < ELSE >
      < LBRACE >
       block(g,!cond) 
      < RBRACE >]  }catch(ParseException e){
		consumeUntil(g, e, "ifElse");
  }   }
/**
* Analisa a expressão lógica do if
* lê apenas variavel e inteiro
*/
boolean expressionLogical(RecoverySet g) throws Exception:
{
  Token t1,t2, op;}
{
	(	  (t1 = < VAR > op = opExpression() t2 = < VAR >) |	  (t1 = < INT_CONSTANT > op = opExpression() t2 = < INT_CONSTANT >) |
	  (t1 = < VAR > op = opExpression() t2 = < INT_CONSTANT >) |	  (t1 = < INT_CONSTANT > op = opExpression() t2 = < VAR >)
	)	{
	  if(tbl.containsKey(t1.image) && tbl.containsKey(t2.image))
	  {
	    
		if(!(tbl.get(t1.image) instanceof Integer))		{		  erros.append("tipo incompativo na expressão! só aceita inteiro");
		  return false;		}		
		if(!(tbl.get(t2.image) instanceof Integer))		{
		  erros.append("tipo incompativo na expressão! só aceita inteiro");		  return false;
		}
		
	    if(op.image.equals("<"))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) < Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals(">"))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) > Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals("=="))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) == Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals("<="))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) <= Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals(">="))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) >= Integer.parseInt(tbl.get(t2.image).toString()));
	  }
	  else if(tbl.containsKey(t1.image) && !tbl.containsKey(t2.image))
	  {
	    if(!(tbl.get(t1.image) instanceof Integer))
		{
		  erros.append("tipo incompativo na expressão! só aceita inteiro");
		  return false;
		}
		
	    if(op.image.equals("<"))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) < Integer.parseInt(t2.image));
	    else if(op.image.equals(">"))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) > Integer.parseInt(t2.image));
	    else if(op.image.equals("=="))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) == Integer.parseInt(t2.image));
	    else if(op.image.equals("<="))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) <= Integer.parseInt(t2.image));
	    else if(op.image.equals(">="))
	    	return (Integer.parseInt(tbl.get(t1.image).toString()) >= Integer.parseInt(t2.image));
	  }
	  else if(!tbl.containsKey(t1.image) && tbl.containsKey(t2.image))
	  {
		
		if(!(tbl.get(t2.image) instanceof Integer))
		{
		  erros.append("tipo incompativo na expressão! só aceita inteiro");
		  return false;
		}
		
	    if(op.image.equals("<"))
	    	return (Integer.parseInt(t1.image) < Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals(">"))
	    	return (Integer.parseInt(t1.image) > Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals("=="))
	    	return (Integer.parseInt(t1.image) == Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals("<="))
	    	return (Integer.parseInt(t1.image) <= Integer.parseInt(tbl.get(t2.image).toString()));
	    else if(op.image.equals(">="))
	    	return (Integer.parseInt(t1.image) >= Integer.parseInt(tbl.get(t2.image).toString()));
	  }
	  else
	  {
	    
	    if(op.image.equals("<"))
	    	return (Integer.parseInt(t1.image) < Integer.parseInt(t2.image));
	    else if(op.image.equals(">"))
	    	return (Integer.parseInt(t1.image) > Integer.parseInt(t2.image));
	    else if(op.image.equals("=="))
	    	return (Integer.parseInt(t1.image) == Integer.parseInt(t2.image));
	    else if(op.image.equals("<="))
	    	return (Integer.parseInt(t1.image) <= Integer.parseInt(t2.image));
	    else if(op.image.equals(">="))
	    	return (Integer.parseInt(t1.image) >= Integer.parseInt(t2.image));
	  }
	}	}
/**
* Pega o operador lógico e retorna o token
*/
Token opExpression():{
  Token token;}
{
 	( 	  token = < AND >
 	| token = < OR >
 	| token = < MINOR >
 	| token = < MAJOR >
 	| token = < EQUALS >
 	| token = < MINOR_EQUAL >
 	| token = < MAJOR_EQUAL >
 	)
 	{ return token;}}
/**
* Bloco do IF e ELSE
* aceita variaveis locais e globais, outro if e else e o comando print seguidos do !
*/
void block(RecoverySet f,boolean cond) throws Exception:
{
  Hashtable local = new Hashtable(); Token token = null;
  RecoverySet g = First.ifStmt.union(f);
}
{
 	try
	{
		 ((vars(local, cond) | IfElse(g,cond) | print(local, cond) ) < END_CMD > )*
	//|  < END_CMD > 
	}catch(ParseException e)
	{
		consumeUntil(g, e, "ifBlock");
	}
}

/**
* Bloco do ELSE
* aceita variaveis locais e globais, if e else, e o comando print seguido de !
*/
/*void elseBlock(RecoverySet f,boolean cond) throws Exception:
{
  Hashtable local = new Hashtable(); Token token = null;
  RecoverySet g = First.elseStmt.union(f);}
{
  {
    if(cond == true)    {
      token = getNextToken();
      while(!token.image.equals("}")) token = getNextToken();
      return;    }  }
	try	{
		((vars(local) | IfElse(g) | print(local) ) < END_CMD > )*	}catch(ParseException e)	{
		consumeUntil(g, e, "elseBlock");	}
	{return;}}*/
/**
* Loop
* formato:
* each(a -> lista)* {
*   < BLOCO >* }
*/
void each(RecoverySet g) throws Exception:{}
{
	< EACH > < LPAREN > eachExp(g) < RPAREN > < LBRACE > eachBlock(g) < RBRACE >}
/**
* Analisa a expressão do each
* a -> list
*/
void eachExp(RecoverySet g) throws Exception:
{
  Token var = null, list = null;}
{
  try  {
	var = < VAR > < SETA > list = < VAR >
  }catch(ParseException e)  {
    consumeUntil(g, e, "eachExp");  }

  {
    if(tbl.containsKey(list.image))
    {
      tbl.put(var.image, tbl.get(list.image)); //faz uma copia da lista com o novo símbolo chave    }  }}
/**
* Bloco do each
* aceita variaveis, if else seguido de !
*/
void eachBlock(RecoverySet f) throws Exception:{
  Hashtable local = new Hashtable();
  RecoverySet g = First.eachStmt.union(f);}
{
	try	{
		((vars(local, true) | IfElse(g, false) | print(local, true) ) < END_CMD > )*	}catch(ParseException e)	{
		consumeUntil(g, e, "eachBlock");	}}
/**
* Comando print para visualizar o conteudo das variaveis
* aceita variavel local e global e lista
*/
void print(Hashtable local, boolean cond):{
  Token token; List<Object> list;}
{
	< PRINT > ( token = < VAR > | token = < INT_CONSTANT > | token = < STRING >)
	{
	  if (cond)	  {
	    if(local != null && local.containsKey(token.image))
	  	{
	    	if(local.get(token.image) instanceof ArrayList)
	    	{
	      		list = (ArrayList<Object>) local.get(token.image);
	      		for(int i = 0; i < list.size(); i++)
	        		erros.append(list.get(i).toString() + " ");
	      		erros.append("\n");
	    	}
	    	else
	    		erros.append(local.get(token.image).toString() + "\n");
	  	}
		else if(tbl.containsKey(token.image))
	  	{
	    	if(tbl.get(token.image) instanceof ArrayList)
	    	{
	      		list = (ArrayList<Object>) tbl.get(token.image);
	      		for(int i = 0; i < list.size(); i++)
	        		erros.append(list.get(i).toString() + " ");
	      		erros.append("\n");
	    	}
	    	else
	    		erros.append(tbl.get(token.image).toString() + "\n");
	  	}
	  	else
	  		erros.append(token.image + "\n");

	  	return;
	  }	}
	}
/**
* Faz o calculo de expressões matemáticas com uma variavel a esquerda
* ou loop each ou if else ou print
*/
void calc (RecoverySet f) throws Exception :
{ double a = 0;
  RecoverySet g = First.calc.union ( f );
}
{
  try  {
	each(g) 		< END_CMD >
	| IfElse(g,true)		< END_CMD >
    | vars(null, true)    < END_CMD >
    | print(null, true)	< END_CMD >	
  } catch ( ParseException e ) {
	consumeUntil ( g, e, "calc" );
	getNextToken();
  }  
}

/**
* Declarar ou alterar o valor de variáveis
* aceita inteiro, string, lista ou expressão do lado direito do =
* retorna um objeto
*/
void vars(Hashtable local, boolean cond) throws Exception : { Token var; Object a; }
{
  var = < VAR > < ATTRIB > (a = list() |  a = < STRING > | a = sum(local))
  {
    if(cond)    {
    	if(local == null)
    		tbl.put ( var.image, a );
   		else
   			local.put(var.image, a);
   		
    	erros.append( "Variável ["+var.image+"] criada/modificada!" + "\n" );
    	erros.append("Conteúdo da variável: " + a + "\n");
   }
  }
}
/**
* Faz soma e subtração
*/
Object sum(Hashtable local)  throws Exception : { Object a, b; Token tk; Double a1, b1; }
{
  a = term(local)
  (
    (
      tk = < PLUS >
    | tk = < MINUS >
    )
    b = term(local)
    {
      if (tk.image=="+")      {
       		a1 = Double.parseDouble(a.toString());
         	b1 = Double.parseDouble(b.toString());
       		a1 += b1;
       		a = a1;      }
      else      {
       		a1 = Double.parseDouble(a.toString());
         	b1 = Double.parseDouble(b.toString());
       		a1 -= b1;
       		b = a1;      }
    }        
  )*
  { return a; }
}
/**
* Faz multiplicação e divisão
*/
Object term(Hashtable local)  throws Exception : { Object a, b; Token tk; Double a1, b1;}
{
  a = unary(local)
  (
    (
      tk = < MULTIPLY >
    | tk = < DIVIDE >
    )
    b = unary(local)
    {
       if (tk.image=="*")       {
         	a1 = Double.parseDouble(a.toString());
         	b1 = Double.parseDouble(b.toString());
         	a1 *= b1;
         	a = a1;       }
      else
      {
       		a1 = Double.parseDouble(a.toString());
         	b1 = Double.parseDouble(b.toString());
         	a1 /= b1;
         	a = a1;      }
    }
  )*
  { return a; }   
}

Object unary(Hashtable local)  throws Exception :
{Object a; }
{
  < MINUS > a=element(local) { return -(Double)a; }
| a=element(local) { return a; }
}

Object element(Hashtable local) throws Exception : 
{
  Token tk; Object a=0;
}
{
     tk = < INT_CONSTANT > { return tk.image ; }
   | tk = < FLOAT >  { return tk.image; }
   | tk = < VAR >
   {
      if(local != null && local.containsKey(tk.image))      	return local.get(tk.image);
      	
      if (tbl.containsKey(tk.image))
        return (tbl.get(tk.image));
        
      throw new ParseException (
        "Variável ["+ tk.image + "] não localizada!"
      + " Linha: " + tk.beginLine + ", Coluna: "+ tk.beginColumn );

      erros.append("Variável ["+ tk.image + "] não localizada!" + "\n");
      erros.append(" Linha: " + tk.beginLine + ", Coluna: "+ tk.beginColumn + "\n");
   }
   | "(" a = sum(local) ")" { return a; }
}